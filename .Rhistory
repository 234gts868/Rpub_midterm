geom_text(data = . %>%
group_by(binwidth, review_score) %>%
tally() %>%
mutate(p = n / sum(n)) %>%
ungroup(),
aes(y = p, label = scales::percent(p)),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
##
ORIS_nodelay=ORIS %>%
filter(delaydays <0)%>%
mutate( binwidth = delaydays %/% 10 )
ORIS_nodelay%>%
ggplot(aes(binwidth, fill=review_score)) +
geom_bar(position = 'fill') +
geom_text(size = 3,data = . %>%
group_by(binwidth, review_score) %>%
tally() %>%
mutate(p = n / sum(n)) %>%
ungroup(),
aes(y = p, label = scales::percent(p)),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
library(tidytext)
library(data.table)
library(tidyr)
library(ggplot2)
library(tm)
library(wordcloud2)
review_tran_m = review_tran %>%
select(translate_message)
colnames(review_tran_m) = "text"
data(stop_words) #add stop word
review_tran_conut =review_tran_m%>%
filter(!is.na(text))%>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word,sort=T)
review_tran_conut$word = removeNumbers(review_tran_conut$word)
review_tran_conut = review_tran_conut %>%
filter(!word =="")
review_tran_conut %>%
top_n(10) %>%  # find top 10
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
review_tran_conut %>%
filter(n >200) %>%
wordcloud2()
library(tm)
library(stringr)
dtm =review_tran$translate_message %>%
iconv(to = "utf-8", sub="") %>%
str_trim(.) %>%
toupper() %>%
VectorSource %>% Corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
DocumentTermMatrix %>%
removeSparseTerms(0.998)
dtm  # (documents: 14156, terms: 1030)
dtm_tmp=dtm
library(slam)
tfidf = tapply(dtm$v/row_sums(dtm)[dtm$i], dtm$j, mean) *
log2(nrow(dtm)/col_sums(dtm > 0))
summary(tfidf)
dtm=dtm_tmp
dtm = dtm[, tfidf > 0.24 ]
dtm = dtm[,order(-col_sums(dtm))]
dim(dtm)
library(Rtsne)
n = 200
tsne = dtm[, 1:n] %>% as.data.frame.matrix %>%
scale %>% t %>% Rtsne(
check_duplicates = FALSE, theta=0.0, max_iter=3200)
Y = tsne$Y              # tSNE coordinates
d = dist(Y)             # distance matrix
hc = hclust(d)          # hi-clustering
K = 20              # number of clusters
g = cutree(hc,K)        # cut into K clusters
table(g) %>% as.vector %>% sort         # sizes of clusters
# install.packages('randomcoloR')
library(randomcoloR)
library(wordcloud)
library(slam)
wc = col_sums(dtm[,1:n])
colors = distinctColorPalette(K)
png("./olist.png", width=3200, height=1800)
textplot(
Y[,1], Y[,2], colnames(dtm)[1:n], show=F,
col=colors[g],
cex= 3 + 1.25 * sqrt(wc/mean(wc)),
font=2)
dev.off()
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
View(p)
?plot
googleVis::plot(p)
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
options(op)
plot(p)
options(op)
plot(p)
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
options(op)
unlink('0419_cache', recursive = TRUE)
library(knitr); opts_chunk$set(comment = NA)
dtm =review_tran$translate_message %>%
iconv(to = "utf-8", sub="") %>%
str_trim(.) %>%
toupper() %>%
VectorSource %>% Corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
DocumentTermMatrix %>%
removeSparseTerms(0.998)
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
options(op)
options(width=100, gvis.plot.tag='chart', digits=4, scipen=60)
plot(p)
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
options(op)
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
# op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
# options(op)
# 這些程式碼設定網頁的格式，並安裝、載入一些基本的套件，請大家不要去改動<br>
rm(list=ls(all=T))
knitr::opts_chunk$set(comment = NA)
knitr::opts_knit$set(global.par = TRUE)
par(cex=0.8)
options(scipen=20, digits=5, width=80)
if(!require(pacman)) install.packages("pacman")
library(knitr); opts_chunk$set(comment = NA)
library(readr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(d3heatmap)
library(googleVis)
options(width=100, gvis.plot.tag='chart', digits=4, scipen=60)
customer <- read_csv("data/olist_customers_dataset.csv")
item <- read_csv("data/olist_order_items_dataset.csv")
review <- read_csv("data/olist_order_reviews_dataset.csv")
order <- read_csv("data/olist_orders_dataset.csv")
product <-read_csv("data/olist_products_dataset.csv")
seller <-read_csv("data/olist_sellers_dataset.csv")
translation <-read_csv("data/product_category_name_translation.csv")
lead <-read_csv("data/olist_closed_deals_dataset.csv")
review$review_score = as.factor(review$review_score)
review_tran <- read_csv("data/olist_order_reviews_dataset_translated.csv")
# ORIS<- merge(products,order_items,by= "product_id")
# ORIS <- merge(ORIS ,order_reviews,by= "order_id")
# ORIS <- merge(ORIS,translation,by= "product_category_name")
# ORIS <-merge(ORIS,sellers,by= "seller_id")
# ORIS <-merge(ORIS,orders,by= "order_id")
# ORIS <-merge(ORIS,customer,by= "customer_id")
#ORIS$review_score=as.factor(ORIS$review_score)
ORIS = order %>%
inner_join(review) %>%
inner_join(item) %>%
inner_join(seller)
ORIS$delaydays=
difftime(as.Date(ORIS$order_delivered_customer_date,na.rm=TRUE),
as.Date(ORIS$order_estimated_delivery_date,na.rm=TRUE),units = "days")
ORIS = ORIS %>%
filter(!is.na(delaydays))
mean(ORIS$delaydays)
sd(ORIS$delaydays)
ggplot(ORIS ,aes(delaydays)) +
geom_histogram(bins = 30) + xlim(-100,100)
# 7294 delay
table(ORIS$delaydays>0)
library(lubridate)
ORIS$delay=ORIS$delaydays>0   #delay or not
ORIS$order_purchase_timestamp=as.Date(ORIS$order_purchase_timestamp,na.rm=TRUE)
ggplot(ORIS, aes(month(ORIS$order_purchase_timestamp), fill =delay )) + geom_bar()
delay_data  = ORIS %>%
select(order_purchase_timestamp)
delay_data$month=format(delay_data$order_purchase_timestamp,'%Y%m')
delay_data$day=format(delay_data$order_purchase_timestamp,'%d')
table(as.numeric(delay_data$month),as.numeric(delay_data$day)) %>%as.data.frame.matrix %>%
{log(.+1)} %>%
d3heatmap(F,F,color=cm.colors(17))
ORIP = order %>%
inner_join(review) %>%
inner_join(item) %>%
inner_join(product) %>%
inner_join(translation) %>%
left_join(ORIS,by ="order_id")
count(ORIP,product_category_name_english,delay) %>%
filter(product_category_name_english=='baby')
#sort(table(ORIP$product_category_name_english),decreasing = T)
ORIP%>%
filter(!is.na(delay)) %>%
group_by(product_category_name_english)%>%
summarise(
ratio=sum(delay)/n()
) %>%
top_n(10) %>%
mutate(new_x=reorder(product_category_name_english,ratio)) %>%
ggplot(aes(new_x,ratio)) +
geom_bar(stat='identity',fill = "steelblue")+
coord_flip()
######
library(forcats)
ORIP%>%
group_by(product_category_name_english)%>%
summarise(n=n()) %>%
arrange( desc(n) )%>%
head(10)%>%
inner_join(ORIP)%>%
ggplot(aes(fct_rev(fct_infreq (product_category_name_english)),fill=delay)) +
geom_bar()+
coord_flip()
ORIS$delaydays = as.numeric(ORIS$delaydays)
ORIS_delay=ORIS %>%
filter(delaydays<50) %>%
filter(delaydays>0)%>%
mutate( binwidth = delaydays %/% 5 )
# mutate( binwidth = paste(as.character((ORIS$A %/% 5)*5-4) ,"-", as.character((ORIS$A %/% 5)*5)))
#w = paste(as.character((ORIS$B %/% 5)*5-4) ,zzz, as.character((ORIS$B %/% 5)*5))
#w
#  percentage of score ~ day
ORIS_delay%>%
ggplot(aes(binwidth, fill=review_score)) +
geom_bar(position = 'fill') +
geom_text(data = . %>%
group_by(binwidth, review_score) %>%
tally() %>%
mutate(p = n / sum(n)) %>%
ungroup(),
aes(y = p, label = scales::percent(p)),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
##
ORIS_nodelay=ORIS %>%
filter(delaydays <0)%>%
mutate( binwidth = delaydays %/% 10 )
ORIS_nodelay%>%
ggplot(aes(binwidth, fill=review_score)) +
geom_bar(position = 'fill') +
geom_text(size = 3,data = . %>%
group_by(binwidth, review_score) %>%
tally() %>%
mutate(p = n / sum(n)) %>%
ungroup(),
aes(y = p, label = scales::percent(p)),
position = position_stack(vjust = 0.5),
show.legend = FALSE)
library(tidytext)
library(data.table)
library(tidyr)
library(ggplot2)
library(tm)
library(wordcloud2)
review_tran_m = review_tran %>%
select(translate_message)
colnames(review_tran_m) = "text"
data(stop_words) #add stop word
review_tran_conut =review_tran_m%>%
filter(!is.na(text))%>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
count(word,sort=T)
review_tran_conut$word = removeNumbers(review_tran_conut$word)
review_tran_conut = review_tran_conut %>%
filter(!word =="")
review_tran_conut %>%
top_n(10) %>%  # find top 10
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
review_tran_conut %>%
filter(n >200) %>%
wordcloud2()
library(tm)
library(stringr)
dtm =review_tran$translate_message %>%
iconv(to = "utf-8", sub="") %>%
str_trim(.) %>%
toupper() %>%
VectorSource %>% Corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(stemDocument) %>%
DocumentTermMatrix %>%
removeSparseTerms(0.998)
dtm  # (documents: 14156, terms: 1030)
dtm_tmp=dtm
library(slam)
tfidf = tapply(dtm$v/row_sums(dtm)[dtm$i], dtm$j, mean) *
log2(nrow(dtm)/col_sums(dtm > 0))
summary(tfidf)
dtm=dtm_tmp
dtm = dtm[, tfidf > 0.24 ]
dtm = dtm[,order(-col_sums(dtm))]
dim(dtm)
library(Rtsne)
n = 200
tsne = dtm[, 1:n] %>% as.data.frame.matrix %>%
scale %>% t %>% Rtsne(
check_duplicates = FALSE, theta=0.0, max_iter=3200)
Y = tsne$Y              # tSNE coordinates
d = dist(Y)             # distance matrix
hc = hclust(d)          # hi-clustering
K = 20              # number of clusters
g = cutree(hc,K)        # cut into K clusters
table(g) %>% as.vector %>% sort         # sizes of clusters
# install.packages('randomcoloR')
library(randomcoloR)
library(wordcloud)
library(slam)
wc = col_sums(dtm[,1:n])
colors = distinctColorPalette(K)
png("./olist.png", width=3200, height=1800)
textplot(
Y[,1], Y[,2], colnames(dtm)[1:n], show=F,
col=colors[g],
cex= 3 + 1.25 * sqrt(wc/mean(wc)),
font=2)
dev.off()
library(shiny)
ORISI  =ORIS %>%
na.omit() %>%
inner_join(product,by="product_id") %>%
inner_join(translation)%>%
group_by(product_category_name_english,order_purchase_timestamp)%>%
summarise(order_n = sum(n()),
avg_delay = mean(delay),
avg_delaydays = mean(delaydays),
avg_product_length_cm = mean(product_length_cm),
avg_product_width_cm = mean(product_width_cm),
avg_product_height_cm=mean(product_height_cm),
avg_product_weight_g=mean(product_weight_g),
avg_product_description_lenght=mean(product_description_lenght),
avg_product_photos_qty = mean(product_photos_qty),
avg_product_name_lenght =mean(product_name_lenght),
# avg_shipping_limit_date=mean(shipping_limit_date),
avg_review_score=mean(as.numeric(review_score)),
avg_freight_value=mean(freight_value))
head(ORISI$product_category_name_english)
# op = options(gvis.plot.tag='chart')
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
# options(op)
# op = options(gvis.plot.tag='chart')
p = ORISI %>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
p = ORISI %>%data.frame()%>%
gvisMotionChart(
"product_category_name_english", "order_purchase_timestamp",
options=list(width=720, height=480) )
plot(p)
